{"version":3,"file":"static/js/888.df62106d.chunk.js","mappings":"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","sources":["component/core/AudioSphere.js","component/LandingPage/HelloPage.js","component/core/LandingPage.js","component/core/Maintain.js","component/core/TextAround.js","component/utils/_CSSUnits.js","hook/useStore.js"],"sourcesContent":["import React from 'react';\r\nimport * as THREE from 'three';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport useStore from '../../hook/useStore';\r\n\r\nclass AudioData {\r\n    constructor(audio, fftSize = 8192, smoothing = 0.8) {\r\n        this.audio = audio;\r\n        this.audioContext = new AudioContext();\r\n        this.analyser = this.audioContext.createAnalyser();\r\n        this.analyser.fftSize = fftSize;\r\n        this.analyser.smoothingTimeConstant = smoothing;\r\n        this.frequencyData = new Uint8Array(this.analyser.frequencyBinCount);\r\n        this.audioSource = this.audioContext.createMediaElementSource(this.audio);\r\n        this.audioSource.connect(this.analyser);\r\n        this.analyser.connect(this.audioContext.destination);\r\n    }\r\n    play() {\r\n        this.audioContext.resume()\r\n            .then(() => this.audio.play())\r\n            .catch(console.error);\r\n    }\r\n    pause() {\r\n        this.audio.pause();\r\n    }\r\n    get frequency() {\r\n        this.analyser.getByteFrequencyData(this.frequencyData);\r\n        return this.frequencyData;\r\n    }\r\n}\r\n\r\nclass ParticlesSphere {\r\n    constructor(radius = 100, numParticles = 4000, turns = 60) {\r\n        this.radius = radius;\r\n        this.numParticles = numParticles;\r\n        // Number of times to turn around the y-axis\r\n        this.turns = turns;\r\n        this.step = 2 / this.numParticles;\r\n\r\n        this.geometry = new THREE.BufferGeometry();\r\n        this.lineMaterial = new THREE.LineBasicMaterial({ \r\n            color: 0xffffff \r\n        });\r\n        this.initPositions = new Float32Array(this.numParticles * 3);\r\n        this.init();\r\n    }\r\n    // Create a discretized 3D sphere of particles using a spiral discretization\r\n    // See https://gist.github.com/aptxwang/628a2b038c6d01ecbc57\r\n    // Note that this paper could also be interesting to look more into: \r\n    // https://agupubs.onlinelibrary.wiley.com/doi/epdf/10.1029/2007GC001581\r\n    init() {\r\n        const positions = new Float32Array(this.numParticles * 3);\r\n        let index = 0;\r\n        for (let i = -1; i <= 1; i += this.step) {\r\n            const phi = Math.acos(i);\r\n            const theta = (2 * this.turns * phi) % (2 * Math.PI);\r\n            // Note that y and z are flipped in the following calculations \r\n            // since the cartesian coordinate system is in a different rotation\r\n            // in Three.js than it typically is visualized in math courses\r\n            positions[index++] = Math.cos(theta) * Math.sin(phi) * this.radius;\r\n            positions[index++] = Math.sin(theta) * Math.sin(phi) * this.radius;\r\n            positions[index++] = Math.cos(phi) * this.radius;\r\n        }\r\n        this.initPositions = [...positions];\r\n        this.geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n    }\r\n    /**\r\n     * @param {boolean} bool\r\n     */\r\n    set positionNeedsUpdate(bool) {\r\n        this.geometry.getAttribute('position').needsUpdate = bool;\r\n        this.geometry.computeBoundingBox();\r\n        this.geometry.computeBoundingSphere();\r\n    }\r\n    get lineMesh() {\r\n        return new THREE.Line(this.geometry, this.lineMaterial);\r\n    }\r\n}\r\n\r\nconst StyledAudioSphere = styled.div`\r\n    position: relative;\r\n    width: 60vh;\r\n    height: 60vh;\r\n    z-index: 1;\r\n`;\r\n\r\nconst StyledCanvasWrapper = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    & > canvas {\r\n        position: absolute;\r\n        width: 100vh !important;\r\n        height: 100vh !important;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n    }\r\n`;\r\n\r\nconst StyledAudio = styled.audio`\r\n    display: none;\r\n`;\r\n\r\nconst DumbAnimation = keyframes`\r\n    0% {background-position: left;}\r\n    50% {background-position: right;}\r\n    100% {background-position: left;}\r\n`;\r\n// gradient text (trick)\r\n\r\nconst StyledAudioControls = styled.div`\r\n    position: absolute;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 5px;\r\n    width: 6rem;\r\n    height: 2rem;\r\n    top: 100%;\r\n    left: 100%;\r\n    transform: translateY(-50%);\r\n    overflow: hidden;\r\n    color: var(--primary);\r\n    font-family: var(--codeFont);\r\n    font-weight: bold;\r\n    border-radius: 1.5rem;\r\n    border: 1.5px solid var(--text);\r\n    transition: all 0.25s ease-in-out;\r\n\r\n    &::before {\r\n        content: 'AUDIO';\r\n    }\r\n    &::after {\r\n        content: '⬤';\r\n        font-size: 1.5rem;\r\n        background-size: 400% 100%;\r\n        background-image: linear-gradient(to right, var(--primary), #9dc5c3);\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        animation: ${DumbAnimation} 10s infinite;\r\n    }\r\n\r\n    &[active=true] {\r\n        color: var(--secondary);\r\n        &::after {\r\n            background-image: linear-gradient(to right, \r\n                #FEED07, \r\n                #FE6A50, \r\n                #ED00AA, \r\n                #2FE3FE, \r\n                #8900FF\r\n            );\r\n        }\r\n    }\r\n`;\r\n\r\nfunction AudioSphere(props) {\r\n    const audioEl = React.useRef(null);\r\n    const audioControlEl = React.useRef(null);\r\n    const canvasWrapper = React.useRef(null);\r\n    const cursorEl = useStore(state => state.cursorRef);\r\n    let activeAudio = false;\r\n    let isInteracting = false;\r\n\r\n    let frameId;\r\n    let camera, scene, renderer, controls;\r\n    let audioData;\r\n    let particlesSphere, sphereMesh, center;\r\n    // Skip the first frequencies as they have too big values and mess up the shape of the sphere\r\n    let skipFreq = 620;\r\n\r\n    const onWindowResize = (resizeEvent) => {\r\n        if (!renderer || !camera) return;\r\n        let width = canvasWrapper.current?.offsetWidth;\r\n        let height = canvasWrapper.current?.offsetHeight;\r\n\r\n        camera.aspect = width / height;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(width, height);\r\n    }\r\n    const onMouseDown = () => {\r\n        isInteracting = true;\r\n    }\r\n    const onMouseUp = () => {\r\n        isInteracting = false;\r\n    }\r\n\r\n    const init = () => {\r\n        const container = canvasWrapper.current;\r\n        // renderer\r\n        renderer = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true\r\n        });\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        renderer.setSize(container.offsetWidth, container.offsetHeight);\r\n        // scene\r\n        scene = new THREE.Scene();\r\n        // camera\r\n        camera = new THREE.PerspectiveCamera(\r\n            45,\r\n            container.offsetWidth / container.offsetHeight,\r\n            0.001,\r\n            1000\r\n        );\r\n        // orbit controls \r\n        controls = new OrbitControls(camera, container);\r\n        controls.enableDamping = true;\r\n        controls.enableZoom = false;\r\n        controls.enablePan = false;\r\n\r\n        camera.position.set(0, 100, 500);\r\n        particlesSphere = new ParticlesSphere(100, 2000, 30);\r\n        sphereMesh = particlesSphere.lineMesh;\r\n        center = Math.floor(particlesSphere.numParticles / 2);\r\n        scene.add(sphereMesh);\r\n        container.appendChild(renderer.domElement);\r\n        container.addEventListener(\"mousedown\", onMouseDown);\r\n        container.addEventListener(\"mouseup\", onMouseUp);\r\n    }\r\n    const render = () => {\r\n        frameId = requestAnimationFrame(render);\r\n        if (!isInteracting) {\r\n            sphereMesh.rotation.y += 0.01;\r\n            sphereMesh.rotation.x += 0.01;\r\n            sphereMesh.rotation.z += 0.01;\r\n        }\r\n        const frequencyData = audioData?.frequency;\r\n        if (frequencyData) {\r\n            const positions = particlesSphere.geometry.getAttribute('position').array;\r\n            for (let i = 0; i <= center; i++) {\r\n                if (i + skipFreq >= frequencyData.length) continue;\r\n                const factor = frequencyData[i + skipFreq] / 256 + 1; // between 1 and 2\r\n                let vertexIndex = center + i;       \r\n                positions[vertexIndex * 3] = particlesSphere.initPositions[vertexIndex * 3] * factor;\r\n                positions[vertexIndex * 3 + 1] = particlesSphere.initPositions[vertexIndex * 3 + 1] * factor;\r\n                positions[vertexIndex * 3 + 2] = particlesSphere.initPositions[vertexIndex * 3 + 2] * factor;\r\n\r\n                vertexIndex = center - i;\r\n                positions[vertexIndex * 3] = particlesSphere.initPositions[vertexIndex * 3] * factor;\r\n                positions[vertexIndex * 3 + 1] = particlesSphere.initPositions[vertexIndex * 3 + 1] * factor;\r\n                positions[vertexIndex * 3 + 2] = particlesSphere.initPositions[vertexIndex * 3 + 2] * factor;\r\n            }\r\n            particlesSphere.positionNeedsUpdate = true;\r\n        }\r\n        controls.update();\r\n        renderer.render(scene, camera);\r\n    }\r\n    const stop = () => {\r\n        if (!frameId) return;\r\n        cancelAnimationFrame(frameId);\r\n        const container = canvasWrapper.current;\r\n        container?.removeEventListener(\"mousedown\", onMouseDown);\r\n        container?.removeEventListener(\"mouseup\", onMouseUp);\r\n    }\r\n\r\n    const onMouseEnter = () => {\r\n        if (!cursorEl?.current) return;\r\n        cursorEl.current.setAttribute('hover', true);\r\n    }\r\n    const onMouseLeave = () => {\r\n        if (!cursorEl?.current) return;\r\n        cursorEl.current.removeAttribute('hover');\r\n    }\r\n    const onClick = () => {\r\n        setActiveAudio(!activeAudio);\r\n    }\r\n    const onAudioEnded = () => {\r\n        setActiveAudio(false);\r\n    }\r\n    const setActiveAudio = (isActive) => {\r\n        activeAudio = isActive;\r\n        if (!audioData) audioData = new AudioData(audioEl.current);\r\n        if (isActive) audioData.play();\r\n        else audioData.pause();\r\n        audioControlEl.current.setAttribute('active', isActive);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const audioControl = audioControlEl.current;\r\n        const audio = audioEl.current;\r\n        try {\r\n            init();\r\n            render();\r\n        } catch(err) {\r\n            console.error(err);\r\n        }\r\n        setActiveAudio(activeAudio);\r\n        audioControl.addEventListener(\"click\", onClick);\r\n        audio.addEventListener(\"ended\", onAudioEnded);\r\n        window.addEventListener(\"resize\", onWindowResize);\r\n        return () => {\r\n            audioControl?.removeEventListener(\"click\", onClick);\r\n            audio?.removeEventListener(\"ended\", onAudioEnded);\r\n            window.removeEventListener('resize', onWindowResize);\r\n            stop();\r\n        };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <StyledAudioSphere>\r\n            <StyledAudio ref={audioEl} src={props.src} />\r\n            <StyledCanvasWrapper ref={canvasWrapper} />\r\n            <StyledAudioControls \r\n                ref={audioControlEl} \r\n                onMouseEnter={onMouseEnter} \r\n                onMouseLeave={onMouseLeave} />\r\n        </StyledAudioSphere>\r\n    )\r\n}\r\n\r\nexport default AudioSphere;","import styled, { keyframes } from \"styled-components\";\r\nimport React from \"react\";\r\nimport StyledLandingPage from \"../core/LandingPage\";\r\nimport Maintain from \"../core/Maintain\";\r\nimport TextAround from \"../core/TextAround\";\r\nimport AudioSphere from \"../core/AudioSphere\";\r\nimport useStore from \"../../hook/useStore\";\r\nimport { vh } from \"../utils/_CSSUnits\";\r\n\r\nconst Rotate = keyframes`\r\n    0% {transform: rotate(0deg);}\r\n    100% {transform: rotate(360deg);}\r\n`;\r\n\r\nconst StyledHelloPage = styled(StyledLandingPage)`\r\n    --ringBorder: 5px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-image: url(${process.env.PUBLIC_URL}/images/home-desktop-background.gif);\r\n\r\n    &::before {\r\n        content: '';\r\n        position: absolute;\r\n        width: 75vh;\r\n        height: 75vh;\r\n        /* gradient border with radius (trick) */\r\n        border: var(--ringBorder) solid transparent;\r\n        background:\r\n            linear-gradient(to right, \r\n                #FE6A50, \r\n                #ED00AA, \r\n                #2FE3FE, \r\n                #8900FF),\r\n            border-box;\r\n        background-size: calc(100% + var(--ringBorder) * 2) calc(100% + var(--ringBorder) * 2);\r\n        background-position: center;\r\n        -webkit-mask:\r\n            linear-gradient(#fff 0 0) padding-box, \r\n            linear-gradient(#fff 0 0);\r\n        -webkit-mask-composite: xor;\r\n        border-radius: 50%;\r\n        mask-composite: exclude;\r\n        /* end trick */\r\n        margin: auto;\r\n        z-index: 1;\r\n        animation: ${Rotate} 10s alternate infinite;\r\n    }\r\n\r\n    &::after {\r\n        content: '';\r\n        position: absolute;\r\n        width: 100vw;\r\n        height: 100vh;\r\n        background-color: var(--background);\r\n        opacity: 0.5;\r\n        z-index: 0;\r\n    }\r\n`;\r\n\r\nconst StyledHelloWorld = styled.div`\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 25%;\r\n    transform: translate(-50%, -50%);\r\n    z-index: 1;\r\n`;\r\n\r\nconst mySkills = [\r\n    'Back-end',\r\n    'Front-end',\r\n    'Computer Science',\r\n    'Game Dev',\r\n    'Gamer',\r\n]\r\n\r\nfunction HelloPage(props) {\r\n    const { componentIndex } = props;\r\n    const index = useStore(state => state.slideIndex);\r\n    \r\n    return (\r\n        <StyledHelloPage>\r\n            {React.useMemo(() => {return <AudioSphere src={`${process.env.PUBLIC_URL}/audios/river.mp3`} />}, [])}\r\n            <TextAround \r\n                texts={mySkills} \r\n                radius={vh(40)}\r\n                active={index === componentIndex} />\r\n            <StyledHelloWorld>\r\n                <Maintain componentIndex={componentIndex}>\r\n                    <h1>Hello, World!</h1>\r\n                    <p>\r\n                        I'm Vu Tung Minh aka thuongton999<br /><br />\r\n                        I have a passion for programming and I'm currently learning web development.\r\n                    </p>\r\n                </Maintain>\r\n            </StyledHelloWorld>\r\n        </StyledHelloPage>\r\n    );\r\n}\r\nexport default HelloPage;","import styled from \"styled-components\";\r\n\r\nconst StyledLandingPage = styled.div`\r\n    position: relative;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-attachment: fixed;\r\n`;\r\n\r\nexport default StyledLandingPage;","import styled from 'styled-components'; \r\nimport React from 'react';\r\nimport useStore from '../../hook/useStore';\r\n\r\nconst StyledMaintain = styled.div`\r\n    width: min-content;\r\n    opacity: ${props => props.active ? 1 : 0};\r\n    filter: drop-shadow(0 0 10px var(--background));\r\n    transform: ${props => props.active ? \r\n        'translateX(0)' : \r\n        props.left ? 'translateX(-100%)' : 'translateX(100%)'};\r\n    transition: all 1.2s ease-in-out;\r\n\r\n    & > * {\r\n        color: var(--text);\r\n    }\r\n\r\n    & > h1 {\r\n        font-size: 4em;\r\n        font-weight: 800;\r\n        font-family: var(--headerFont);\r\n    }\r\n\r\n    & > code {\r\n        font-family: var(--codeFont);\r\n    }\r\n\r\n    & > p {\r\n        display: flex;\r\n        transform: translateY(1em);\r\n        text-align: left;\r\n        font-family: var(--textFont);\r\n        vertical-align: middle;        \r\n\r\n        &::before {\r\n            content: \"-\";\r\n            transform: translateY(-35%);\r\n            font-size: 5em;\r\n            height: 100%;\r\n        }\r\n    }\r\n`;\r\n\r\nfunction Maintain(props) {\r\n    const { componentIndex } = props;\r\n    const index = useStore(state => state.slideIndex);\r\n\r\n    return (\r\n        <StyledMaintain \r\n            active={index === componentIndex} \r\n            left={index > componentIndex}\r\n            {...props}>\r\n            {props.children}\r\n        </StyledMaintain>\r\n    );\r\n}\r\n\r\nexport default React.memo(Maintain);","import styled from \"styled-components\";\r\nimport React from \"react\";\r\n\r\nconst AVG_ANGLE = 5;\r\n\r\nconst StyledTextAround = styled.ul`\r\n    display: flex;\r\n    position: absolute;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 50%;\r\n    pointer-events: none;\r\n`;\r\n\r\nconst StyledText = styled.li`\r\n    --opacity: 1;\r\n    position: absolute;\r\n    width: 100px;\r\n    color: var(--text);\r\n    opacity: calc(var(--opacity) * 1);\r\n    font-family: var(--codeFont);\r\n    font-weight: bold;\r\n    text-shadow: 0 0 10px var(--background);\r\n    z-index: 9999999;\r\n    transition: all 0.5s ease;\r\n`;\r\n\r\nfunction TextAround(props) {\r\n    const { \r\n        texts, \r\n        xOffset, yOffset, \r\n        radius, \r\n        active,\r\n        activeAt } = props;\r\n    const textEls = React.useRef([]);\r\n    const textCount = texts.length;\r\n    const center = (activeAt || activeAt === 0) ? activeAt : textCount / 2;\r\n    const cRadius = radius;\r\n\r\n    const getAngle = (index) => {\r\n        const offset = Math.round(index - center);\r\n        return offset * AVG_ANGLE;\r\n    }\r\n\r\n    const getPosition = (index) => {\r\n        const angle = getAngle(index);\r\n        const x = (cRadius + (xOffset || 20)) * Math.cos(angle * Math.PI / 90);\r\n        const y = (cRadius + (yOffset || 0)) * Math.sin(angle * Math.PI / 180);\r\n        return { x, y };\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const els = textEls.current;\r\n        els.forEach((el, index) => {\r\n            let { x, y } = getPosition(active ? index : 0);\r\n            let opacity = 1;\r\n            if (activeAt || activeAt === 0) {\r\n                const offset = Math.round(index - activeAt);\r\n                opacity = 1 - (Math.abs(offset) / textCount);\r\n            }\r\n            el.style.setProperty(\"--opacity\", active ? opacity : 0);\r\n            el.style.transform = `translate(calc(${x}px + 50%), ${y * 2}px)`;\r\n        });\r\n        return () => {\r\n            els.forEach(el => el?.removeAttribute('active'));\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [active, activeAt]);\r\n\r\n    return (\r\n        <StyledTextAround {...props}>\r\n            {texts?.map((text, index) => {\r\n                return (\r\n                    <StyledText\r\n                        key={index}\r\n                        ref={ref => textEls.current[index] = ref}>\r\n                        {text}\r\n                    </StyledText>\r\n                );\r\n            })}\r\n        </StyledTextAround>\r\n    )\r\n}\r\n\r\nexport default React.memo(TextAround);","const vh = (units) => {\r\n    const windowHeight = window.innerHeight;\r\n    return windowHeight / 100 * units;\r\n}\r\n\r\nconst vw = (units) => {\r\n    const windowWidth = window.innerWidth;\r\n    return windowWidth / 100 * units;\r\n}\r\n\r\nexport { vh, vw };","import create from 'zustand';\r\n\r\nconst useStore = create(set => ({\r\n    slideIndex: 0,\r\n    nextPage: () => set(state => ({ slideIndex: state.slideIndex + 1 })),\r\n    prevPage: () => set(state => ({ slideIndex: state.slideIndex - 1 })),\r\n    setPage: (pageIndex) => set(state => ({ slideIndex: pageIndex })),\r\n\r\n    cursorRef: null,\r\n    setCursorRef: (ref) => set(state => ({ cursorRef: ref })),\r\n}));\r\n\r\nexport default useStore;"],"names":["AudioData","audio","fftSize","smoothing","this","audioContext","AudioContext","analyser","createAnalyser","smoothingTimeConstant","frequencyData","Uint8Array","frequencyBinCount","audioSource","createMediaElementSource","connect","destination","resume","then","play","catch","console","error","pause","getByteFrequencyData","ParticlesSphere","radius","numParticles","turns","step","geometry","THREE","lineMaterial","color","initPositions","Float32Array","init","positions","index","i","phi","Math","acos","theta","PI","cos","sin","setAttribute","bool","getAttribute","needsUpdate","computeBoundingBox","computeBoundingSphere","StyledAudioSphere","styled","StyledCanvasWrapper","StyledAudio","DumbAnimation","keyframes","StyledAudioControls","props","frameId","camera","scene","renderer","controls","audioData","particlesSphere","sphereMesh","center","audioEl","React","audioControlEl","canvasWrapper","cursorEl","useStore","state","cursorRef","activeAudio","isInteracting","onWindowResize","resizeEvent","width","current","offsetWidth","height","offsetHeight","aspect","updateProjectionMatrix","setSize","onMouseDown","onMouseUp","render","requestAnimationFrame","rotation","y","x","z","frequency","array","length","factor","vertexIndex","positionNeedsUpdate","update","onClick","setActiveAudio","onAudioEnded","isActive","audioControl","container","antialias","alpha","setPixelRatio","window","devicePixelRatio","OrbitControls","enableDamping","enableZoom","enablePan","position","set","lineMesh","floor","add","appendChild","domElement","addEventListener","err","removeEventListener","cancelAnimationFrame","stop","ref","src","onMouseEnter","onMouseLeave","removeAttribute","Rotate","StyledHelloPage","StyledLandingPage","process","StyledHelloWorld","mySkills","componentIndex","slideIndex","TextAround","texts","vh","active","Maintain","StyledMaintain","left","children","StyledTextAround","StyledText","xOffset","yOffset","activeAt","textEls","textCount","cRadius","getPosition","angle","round","getAngle","els","forEach","el","opacity","offset","abs","style","setProperty","transform","map","text","units","innerHeight","create","nextPage","prevPage","setPage","pageIndex","setCursorRef"],"sourceRoot":""}